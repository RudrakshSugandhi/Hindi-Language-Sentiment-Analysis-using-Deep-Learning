# -*- coding: utf-8 -*-
"""hindi sentiment analysis usign deep learning.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1yaCvv0Rw-u7dbWOl-ztB3uQ7HaKqw7EY
"""

from google.colab import files
files.upload()

import pandas as pd
from sklearn.utils import shuffle
Cov = pd.read_excel("Sample1.xlsx", sep='\t', names=["Text", "Label"])
print(Cov)
Cov=shuffle(Cov)
sentence=Cov.iloc[:,0]

labels=Cov.iloc[:,1]
print(sentence.size)
print(type(labels))

# removed all the puntuations from the text
from string import punctuation
#converted into a single string
s_text=" ".join([i for i in sentence if i not in  punctuation])
print(s_text)

#split into words and add them to list sentence_split
sentence_split = s_text.split(' ')
print(sentence_split)

from collections import Counter
import numpy as np

counts = Counter(sentence_split)
#print(counts)

vocab = sorted(counts, key = counts.get, reverse = True)
#vocab_size=len(vocab)
#print(vocab)

#create a dictionary word to integer
vocab_to_int = {word: li for li, word in enumerate(vocab,1)}
#print(vocab_to_int)

#use dictionary to tokeninze each word in sentence list
sentence_ints= []
for sent in sentence:
  sentence_ints.append([vocab_to_int[word] for word in sent.split()])
#print(sentence_ints)

print('Unique words: ', len((vocab_to_int)))
print('Tokenized review: \n', sentence_ints[:1])

#encode the pandas dataframe to numpy array to pass to our nn
encoded_labels= labels.to_numpy()
print(encoded_labels)

#removing outlier
sentence_lens = Counter([len(x) for x in sentence_ints])
print("Zero-length sentence: {}".format(sentence_lens[0]))
print("Maximun length of sentence: {}".format(max(sentence_lens)))

#padding
def pad_features(sentence_ints, seq_length):
  features = np.zeros((len(sentence_ints), seq_length), dtype=int)
  #print(features.shape)
  for i, row in enumerate(sentence_ints):
        features[i, -len(row):] = np.array(row)[:seq_length]                               #
  return features

seq_length = max(sentence_lens)

features = pad_features(sentence_ints, seq_length)
print(features[:30,:47])

split_frac = 0.8
## split data into training, validation, and test data (features and labels, x and y)

split_idx = int(len(features)*split_frac)
train_x, remaining_x = features[:split_idx], features[split_idx:]
train_y, remaining_y = encoded_labels[:split_idx], encoded_labels[split_idx:]

test_idx = int(len(remaining_x)*0.5)
val_x, test_x = remaining_x[:test_idx], remaining_x[test_idx:]
val_y, test_y = remaining_y[:test_idx], remaining_y[test_idx:]

print("Feature Shapes:")
print("Train set: \t\t{}".format(train_x.shape), 
      "\nValidation set: \t{}".format(val_x.shape),
      "\nTest set: \t\t{}".format(test_x.shape))

import torch
from torch.utils.data import TensorDataset, DataLoader

# create Tensor datasets
train_data = TensorDataset(torch.from_numpy(train_x), torch.from_numpy(train_y))
valid_data = TensorDataset(torch.from_numpy(val_x), torch.from_numpy(val_y))
test_data = TensorDataset(torch.from_numpy(test_x), torch.from_numpy(test_y))

# dataloaders
batch_size = 8

# make sure the SHUFFLE your training data
train_loader = DataLoader(train_data, shuffle=True, batch_size=batch_size)
valid_loader = DataLoader(valid_data, shuffle=True, batch_size=batch_size)
test_loader = DataLoader(test_data, shuffle=True, batch_size=batch_size)

dataiter = iter(train_loader)
sample_x, sample_y = dataiter.next()

train_on_gpu=torch.cuda.is_available()

if(train_on_gpu):
    print('Training on GPU.')
else:
    print('No GPU available, training on CPU.')

import torch.nn as nn

class SentimentRNN(nn.Module):

    def __init__(self, vocab_size, output_size, embedding_dim, hidden_dim, n_layers, drop_prob=0.5):
        
        super(SentimentRNN, self).__init__()

        self.output_size = output_size
        self.n_layers = n_layers
        self.hidden_dim = hidden_dim
        
        # embedding and LSTM layers
        self.embedding = nn.Embedding(vocab_size, embedding_dim)
        self.lstm = nn.LSTM(embedding_dim, hidden_dim, n_layers, 
                            dropout=drop_prob, batch_first=True)
        
        # dropout layer
        self.dropout = nn.Dropout(0.3)
        
        # linear and sigmoid layers
        self.fc = nn.Linear(hidden_dim, output_size)
        self.sig = nn.Sigmoid()
        

    def forward(self, x, hidden):
  
        batch_size = x.size(0)

        # embeddings and lstm_out
        x = x.long()
        embeds = self.embedding(x)
        lstm_out, hidden = self.lstm(embeds, hidden)
    
        # stack up lstm outputs
        lstm_out = lstm_out.contiguous().view(-1, self.hidden_dim)
        
        # dropout and fully-connected layer
        out = self.dropout(lstm_out)
        out = self.fc(out)
        # sigmoid function
        sig_out = self.sig(out)
        
        # reshape to be batch_size first
        sig_out = sig_out.view(batch_size, -1)
        sig_out = sig_out[:, -1] # get last batch of labels
        
        # return last sigmoid output and hidden state
        return sig_out, hidden
    
    
    def init_hidden(self, batch_size):
       
        
        weight = next(self.parameters()).data
        
        if (train_on_gpu):
            hidden = (weight.new(self.n_layers, batch_size, self.hidden_dim).zero_().cuda(),
                  weight.new(self.n_layers, batch_size, self.hidden_dim).zero_().cuda())
        else:
            hidden = (weight.new(self.n_layers, batch_size, self.hidden_dim).zero_(),
                      weight.new(self.n_layers, batch_size, self.hidden_dim).zero_())
        
        return hidden

vocab_size = len(vocab_to_int)+1 # +1 for the 0 padding + our word tokens
output_size = 1
embedding_dim = 200
hidden_dim = 256
n_layers = 2

net = SentimentRNN(vocab_size, output_size, embedding_dim, hidden_dim, n_layers)
print(vocab_size)
print(net)

lr=0.001
criterion = nn.BCELoss() #binary cross entropy loss
optimizer = torch.optim.Adam(net.parameters(), lr=lr)

epochs = 3

counter = 0
print_every = 100
clip=5 # gradient clipping


if(train_on_gpu):
    net.cuda()

net.train()

for e in range(epochs):
    
    h = net.init_hidden(batch_size)
    train_losses = []
    running_loss = 0

   
    for inputs, labels in train_loader:

        counter += 1

        if(train_on_gpu):
            inputs, labels = inputs.cuda(), labels.cuda()

        
        h = tuple([each.data for each in h])

        
        net.zero_grad()

        
        output, h = net(inputs, h)

        
        loss = criterion(output.squeeze(), labels.float())
        loss.backward()
        
        
        nn.utils.clip_grad_norm_(net.parameters(), clip)
        optimizer.step()
        running_loss += loss.item()
        train_losses.append(loss.item())
   
        


        
        if counter % print_every == 0:
            
            val_h = net.init_hidden(batch_size)
            val_losses = []
            net.eval()
            for inputs, labels in valid_loader:

               
                val_h = tuple([each.data for each in val_h])

                if(train_on_gpu):
                    inputs, labels = inputs.cuda(), labels.cuda()

                output, val_h = net(inputs, val_h)
                val_loss = criterion(output.squeeze(), labels.float())

                val_losses.append(val_loss.item())
                
           
               

            net.train()
            print("Epoch: {}/{}...".format(e+1, epochs),
                  "train loss:{}".format(np.mean(train_losses)),
                  "Step: {}...".format(counter),
                  "Loss: {:.6f}...".format(loss.item()),
                  "Val Loss: {:.6f}".format(np.mean(val_losses)))

test_losses = [] # track loss
num_correct = 0

# init hidden state
h = net.init_hidden(batch_size)

net.eval()
# iterate over test data
for inputs, label in test_loader:

    
    h = tuple([each.data for each in h])

    if(train_on_gpu):
        inputs, label = inputs.cuda(), label.cuda()
    
    # get predicted outputs
    output, h = net(inputs, h)
    
    # calculate loss
    test_loss = criterion(output.squeeze(), label.float())
    test_losses.append(test_loss.item())
    
    # convert output probabilities to predicted class (0 or 1)
    pred = torch.round(output.squeeze())  # rounds to the nearest integer
    
    # compare predictions to true label
    correct_tensor = pred.eq(label.float().view_as(pred))
    correct = np.squeeze(correct_tensor.numpy()) if not train_on_gpu else np.squeeze(correct_tensor.cpu().numpy())
    num_correct += np.sum(correct)


# -- stats! -- ##
# avg test loss
print("Test loss: {:.3f}".format(np.mean(test_losses)))

# accuracy over all test data
test_acc = num_correct/len(test_loader.dataset)
print("Test accuracy: {:.3f}".format(test_acc))



import matplotlib.pyplot as plt
plt.plot(train_losses,label = 'train loss')
plt.plot(test_losses,label = 'test loss')
plt.plot(val_losses,label = 'val loss')
plt.legend(frameon=False )



test_senti_pos = "हमारा मनोबल थोड़ा गिरा हुआ था लेकिन इस जीत के बाद आगे के टूर्नामेंट के लिए हमारा हौसला बढ़ेगा।"

from string import punctuation

def tokenize_review(test_senti):
    test_words = test_senti.split()
    test_ints = []
    test_ints.append([vocab_to_int[word] for word in test_words])

    return test_ints

# test code and generate tokenized review
test_ints = tokenize_review(test_senti_pos)
print(test_ints)

seq_length =max(sentence_lens)
features = pad_features(test_ints, seq_length)
print(features)



def predict(net, test_senti, sequence_length=200):
    
    net.eval()
    
    # tokenize review
    test_ints = tokenize_review(test_senti)
    
    # pad tokenized sequence
    seq_length=sequence_length
    features = pad_features(test_ints, seq_length)
    
    # convert to tensor to pass into your model
    feature_tensor = torch.from_numpy(features)
    
    batch_size = feature_tensor.size(0)
    
    # initialize hidden state
    h = net.init_hidden(batch_size)
    
    if(train_on_gpu):
        feature_tensor = feature_tensor.cuda()
    
    # get the output from the model
    output, h = net(feature_tensor, h)
    
    # convert output probabilities to predicted class (0 or 1)
    pred = torch.round(output.squeeze()) 
    # printing output value, before rounding
    print('Prediction value, pre-rounding: {:.6f}'.format(output.item()))
    
    # print custom response
    if(pred.item()==1):
        print("Positive review detected!")
    else:
        print("Negative review detected.")

predict(net, test_senti_pos, seq_length)



